using System;

class Program
{
    static void Main()
    {
        int n = 8;
        double[] x = new double[n];
        double[] fx = new double[n];
        double[] dist = new double[n];
        double distOy = double.MaxValue;
        int minPoint = -1;
        int cnt = 0;

        for (int i = 0; i < n; i++)
        {
            Console.Write($"x{i + 1}: ");
            x[i] = double.Parse(Console.ReadLine());

            double y;
            if (x[i] < -4) {
                y = (Math.Pow(x[i], 2) - 1 / x[i]) / (3 * x[i]) * (x[i] + 3) / (1 + x[i]);
            } else if (x[i] >= -4 && x[i] < 6 * Math.PI) {
                y = Math.Pow(x[i] - 5, 2) * Math.Pow(Math.Sin(2 * x[i]), 2);
            } else {
                y = 11 + 2.0 / 3;
            }

            fx[i] = y;
            double distance = Math.Sqrt(Math.Pow(x[i], 2) + Math.Pow(y, 2));
            dist[i] = distance;

            if ((Math.Pow(x[i], 2) + Math.Pow(y, 2) <= 4) && ((y >= 0 && x[i] <= -2) || (y < 0 && y > x[i] - 4))) {
                cnt++;
            }
            if (x[i] > 0 && y > 0 && distance < distOy) {
                distOy = distance;
                minPoint = i;
            }
        }

        Console.WriteLine("\nx      f(x)      Distance to (0, 0)");
        for (int i = 0; i < n; i++) {
            Console.WriteLine($"{x[i]}    {fx[i]}    {dist[i]}");
        }


        Console.WriteLine($"\nPoints, that are satisfying to the condition: {cnt}");
        Console.WriteLine($"\nClosest to OY: x = {x[minPoint]}, f(x) = {fx[minPoint]}");
    }
}
